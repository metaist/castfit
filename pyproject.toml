[build-system]
requires = ["setuptools >= 40.8.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
castfit = ["py.typed"]

[tool.setuptools.dynamic]
version = { attr = "castfit.__version__" }

[project.urls]
Homepage = "https://github.com/metaist/castfit"
Documentation = "https://metaist.github.io/castfit/"
Repository = "https://github.com/metaist/castfit.git"
Changelog = "https://github.com/metaist/castfit/blob/main/CHANGELOG.md"

[project]
name = "castfit"
description = "Basic type casting."
keywords = ["type", "casting"]

dynamic = ["version"]
requires-python = ">=3.9"
dependencies = [
  # lib => pinned range
]
optional-dependencies = { dev = [
  # dev => latest
  "cogapp",
  "coverage",
  "ds-run",
  "mypy",
  "pdoc3",
  "pip",
  "pyright",
  "pytest-cov",
  "pytest",
  "ruff",
] }
readme = "README.md"
license = "MIT"
license-files = ["LICENSE.md"]
authors = [{ name = "Metaist LLC", email = "metaist@metaist.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries",
  "Typing :: Typed",
]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@overload"]
exclude_also = ["no cover: start(?s:.)*?no cover: stop"]

[tool.mypy]
disable_error_code = "unused-ignore"

[tool.pyright]
exclude = ["**/_vendor/**"]

[tool.ds.scripts] # run dev scripts <https://github.com/metaist/ds>
# Lint
lint = ["ruff-*", "+cspell"]
ruff-format = "uvx ruff format ${@:-.}"
ruff-lint = "uvx ruff check --fix ${@:-.}"
cspell = "npx --yes cspell lint --unique --gitignore --exclude '**/_vendor/**' '**/*.{py,txt,md,markdown}' "

# Type Check
types = ["pyright", "mypy"]
pyright = "npx --yes pyright --pythonversion ${PYTHON_VERSION:-3.9} src test"
mypy = """
  mypy \
    --strict \
    --install-types \
    --non-interactive \
    --exclude '/_vendor/' \
    --python-version ${PYTHON_VERSION:-3.9} \
    src test
"""
ty = "uvx ty check --python-version ${PYTHON_VERSION:-3.9}"
pyrefly = "uvx pyrefly check --python-version ${PYTHON_VERSION:-3.9}"


# Test
test.help = "run unit tests"
test.env = { PYTHONPATH = "src" }
test.shell = """
  coverage run --branch --source=src -m \
    pytest \
      --doctest-modules \
      --doctest-ignore-import-errors \
      "--ignore-glob=*/_vendor/*" \
      $@ src test;
  coverage report --omit='src/cog_helpers.py,*/_vendor/*' -m
"""

coverage-report = "coverage html"
coverage-serve = { shell = "uv run -m http.server 8080", cwd = "htmlcov" }
coverage = ["coverage-*"]

# Documentation
docs = ["cog", "pdoc"]
cog = "cog -r README.md"
pdoc = """
  rm -rf docs;
  mkdir -p docs;
  pdoc3 \
    --html \
    --output-dir docs \
    --config sort_identifiers=False \
    --config show_inherited_members=True \
    --force src/$(basename $(pwd));
  mv docs/**/* docs/;
  touch docs/.nojekyll
"""

# Common
dev.help = "lint, type-check, and unit tests"
dev.composite = ["lint", "types", "test"]

dev-all.help = "check every supported python version"
dev-all.shell = """
  ds lint;
  versions=($(sed -n 's/.*Python :: \\([0-9][0-9]*\\.[0-9][0-9]*\\)",*/\\1/p' pyproject.toml));
  for v in ${versions[@]};
  do
    PYTHON_VERSION=$v
    uv run --isolated --all-extras --python $v -- ds types test;
    if [[ $? != 0 ]]; then
      exit $?;
    fi;
    echo;
  done;
"""

# Build
build = "uv build"
clean = """
  rm -rf .mypy_cache;
  rm -rf .pytest_cache;
  rm -rf .ruff_cache;
  rm -rf dist;
  rm -rf htmlcov;
  rm -rf src/*.egg-info
  rm -rf .coverage;
"""

# Release
recent.help = "see commits since last tag"
recent.shell = "git log --oneline --color $(git describe --tags --abbrev=0)..HEAD"
recent-closed = ["recent | rg 'closes #'"]

release.help = "commit & tag the release"
release.shell = """
  git commit -am "release: $1";
  git tag $1;
  git push;
  git push --tags;
  git checkout main;
  git merge --no-ff --no-edit prod;
  git push;

  awk 'BEGIN {count=0} /---/ {count++} count==2 && !/---/ {print} count==3 {exit}' \
  CHANGELOG.md | gh release create $1 dist/* --draft --verify-tag --title $1 --notes-file -
"""
